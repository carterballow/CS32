Report on TaskList Program Development Challenges: CARTER BALLOW, 806389359
This report outlines my implementation and the issues that I faced throughout the process of writing the class, and writing test cases for the main file. The main challenges were managing function dependencies, handling dynamic memory correctly, and addressing pointer logic for various edge cases.

Function Implementation Order
A significant initial challenge was determining the correct order to implement the member functions, as many methods depended on others to work. A logical progression was necessary for effective development and testing.
1. Core Structure: The foundation required creating the Node struct and the basic class with with the start end and size members. I wasn’t really sure where the Node struct should go originally so I had to consult the specs and I didn’t even know you could write a struct within another class.
2. Basic Operations: Functions like addBack() and size() I deceded to implement first to create and verify a basic list. I also created printAll() as one of the first and it was developed as a crucial debugging tool. The order of writing things was difficult for me.
3. Access and Removal: then the get() and and the find() functions were written to traverse and inspect the list. I then decided to use the getNode() function to retroactively go back and use that in the get() function which was helpful but I didn’t see the value of that originally.
4. Memory Management: The destructor and clear() method were implemented to handle deallocation, which I realized the clear method could be used in a lot of different cases to minimize the amount of repeated code.
5. Advanced C++ Features: The copy constructor and assignment operator were implemented last. These are the most complex as they rely on a fully functional and well-understood class structure and require careful memory handling.

Dynamic Memory Management
The most difficult aspect was the correct management of dynamic memory, which is essential for a linked-list implementation. This involved three key areas known as the rule of three.
* Destructor (~TaskList()): Required writing a custom destructor to iterate through the list and call delete on every node. Forgetting this leads to significant memory leaks, as the memory allocated with new is never freed.
* Copy Constructor (TaskList(const TaskList&)): The default copy constructor performs a shallow copy, which would cause two TaskList objects to point to the same nodes. This is dangerous and would lead to a double-free error when the second object is destroyed. A "deep copy" was necessary, which involves manually iterating through the source list and creating a new node for each element in the destination list.
* Assignment Operator (operator=): This function had two main difficulties:
1. Cleaning Up: It must first delete all the nodes in the list it is being assigned to before copying the new data.
2. Self-Assignment: It needed a check (e.g., if (this != &rhs)) to handle cases like myList = myList;. Without this check, the function would delete its own data before it could be copied, destroying the list.

Pointer Logic and Edge Cases
Handling pointers and specific scenarios correctly was a recurring issue.
* Null Pointers: Operations on an empty list (e.g., removeFront() or get()) had to be carefully checked to prevent dereferencing a nullptr.
* List with One Node: Removing the only element in the list is a special case where both the m_start and m_end pointers must be set to nullptr.
* Pointer Updates: In functions like addBack() and removeFront(), ensuring that m_start, m_end, and the m_next pointers of all affected nodes were updated in the correct order was critical to maintaining the list's integrity.
I wrote a method to help with printing aswell, and some of the test cases that I used were as listed below.

cerr << "\nconstruction" << endl;
    TaskList tasks;
    printTestResult("empty", tasks.empty());
    printTestResult("size", tasks.size() == 0);

    tasks.addBack("goon");
    tasks.addBack("eat hot pancake");
    tasks.addBack("rip ur favorite shirt");
    
    printTestResult("not empty", !tasks.empty());
    printTestResult("size should be 3", tasks.size() == 3);
    cerr << "Current List:" << endl;
    tasks.printAll();

    cerr << "----------------------------------------" << endl;

    cerr << "\nfind elements" << endl;
    string task;
    bool success = tasks.get(0, task);
    printTestResult("get() first element", success && task == "goon");
    
    success = tasks.get(2, task);
    printTestResult("get() last element", success && task == "rip ur favorite shirt");

    success = tasks.get(3, task); // Out of bounds
    printTestResult("get() out of bounds", !success);

    int pos = tasks.find("eat hot pancake");
    printTestResult("find() existing element", pos == 1);

    pos = tasks.find("non-existent task");
    printTestResult("find() non-existent element", pos == -1);

    cerr << "----------------------------------------" << endl;
    
    // --- Test 3: removeFront() ---
    cerr << "\n## Test 3: Removing Elements ##" << endl;
    success = tasks.removeFront(); // Removes "Reply to client emails"
    printTestResult("removeFront() on non-empty list", success && tasks.size() == 2);
    

